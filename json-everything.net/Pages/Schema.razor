@page "/json-schema"
@using Json.Schema.DataGeneration
@using BlazorMonaco
@using Json.Schema
@using System.Text.Json
@using Json.Schema.Data
@using Json.Schema.Generation
@using JsonEverythingNet.Services
@using EditorOptions = JsonEverythingNet.Services.EditorOptions
@using System.Text.Encodings.Web
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using System.Reflection
@using System.Text.Json.Nodes
@using Json.Schema.ArrayExt
@using Json.Schema.CodeGeneration
@using Json.Schema.CodeGeneration.Language
@using Json.Schema.OpenApi
@using Yaml2JsonNode

@inject DataManager DataManager;
@inject NavigationManager NavigationManager;

<PageTitle>JSON Schema - json-everything.net</PageTitle>

<div class="row mx-3 fill-remaining">
	<div class="mh-100 scroll">
		<div class="navbar me-2">
			<div class="align-items-center hstack mx-2">
				<img src="img/json-schema.png" height="70" width="70" class="me-3" />
				<h1 class="display-4">JSON Schema</h1>
				<div class="align-items-center mx-3">
					<div>
						Constraints-based validation of JSON data
						<br/>
						Learn more about
						<a href="https://json-schema.org" target="_blank">JSON Schema <ExternalLinkIcon/></a>
					</div>
				</div>
				<Banner Content="All libraries now support .Net 8 and Native AOT!!" Style="margin-top:0;"></Banner>
			</div>
			<div class="align-items-center mt-1">
				@foreach (var library in _libraries)
				{
					<NugetLibrary Library="library"/>
				}
			</div>
		</div>
		<div class="vstack gap-3 mt-4 me-3">
			<div>
				<div class="row">
					<div class="col-2">
						<div class="vstack gap-3">
							<EditForm Model="_options" class="vstack">
								<label class="my-2">
									What do you want to do?<br/>
									<InputSelect @bind-Value="Operation" DisplayName="Spec version" class="form-control">
										@foreach (SchemaOperations operation in Enum.GetValues(typeof(SchemaOperations)))
										{
											<option value="@operation">@GetDescription(operation)</option>
										}
									</InputSelect>
								</label>
								<div class="vstack @EvaluationOptionsVisibility">
									<label class="my-2">
										Spec Version (<span class="small"><span class="font-monospace">$schema</span> will override</span>)
										<span class="tooltip-icon">
											ⓘ
											<span class="tooltip-text">
												<MarkdownSpan Content="@HelpContent.SchemaVersion"></MarkdownSpan>
											</span>
										</span>
										<br />
										<InputSelect @bind-Value="_options.Version" DisplayName="Spec version" class="form-control">
											@foreach (SpecVersion version in Enum.GetValues(typeof(SpecVersion)))
											{
												if (version == SpecVersion.Unspecified) continue;
												<option value="@version">@GetDescription(version)</option>
											}
										</InputSelect>
									</label>
									<label class="my-2">
										Output format
										<span class="tooltip-icon">
											ⓘ
											<span class="tooltip-text">
												<MarkdownSpan Content="@HelpContent.SchemaOutputFormat"></MarkdownSpan>
											</span>
										</span>
										<br />
										<InputSelect @bind-Value="_options.OutputFormat" DisplayName="Output format" class="form-control">
											@foreach (var format in Enum.GetValues(typeof(OutputFormat)))
											{
												<option value="@format">@format</option>
											}
										</InputSelect>
									</label>
									<label class="my-2">
										Output structure
										<span class="tooltip-icon">
											ⓘ
											<span class="tooltip-text">
												<MarkdownSpan Content="@HelpContent.SchemaOutputStructure"></MarkdownSpan>
											</span>
										</span>
										<br />
										<InputSelect @bind-Value="_options.OutputStructure" DisplayName="Spec version" class="form-control">
											<option value="@SpecVersion.Draft202012">Draft 2020-12</option>
											<option value="@SpecVersion.DraftNext">Draft-Next (preview)</option>
										</InputSelect>
									</label>
									<label class="my-2">
										<InputCheckbox @bind-Value="_options.IncludeDroppedAnnotations" DisplayName="Preserve dropped annotations"/>
										Preserve dropped annotations
										<span class="tooltip-icon">
											ⓘ
											<span class="tooltip-text">
												<MarkdownSpan Content="@HelpContent.SchemaDroppedAnnotations"></MarkdownSpan>
											</span>
										</span>
									</label>
									<label class="my-2">
										<InputCheckbox @bind-Value="_options.AddAnnotationForUnknownKeywords" DisplayName="Unknown keywords annotation" />
										Unknown keywords annotation
										<span class="tooltip-icon">
											ⓘ
											<span class="tooltip-text">
												<MarkdownSpan Content="@HelpContent.SchemaUnknownKeywordsAnnotation"></MarkdownSpan>
											</span>
										</span>
									</label>
									<label class="my-2">
										<InputCheckbox @bind-Value="_options.ValidateFormat" DisplayName="Validate format"/>
										Validate <span class="font-monospace">format</span>
										<span class="tooltip-icon">
											ⓘ
											<span class="tooltip-text">
												<MarkdownSpan Content="@HelpContent.SchemaValidateFormat"></MarkdownSpan>
											</span>
										</span>
									</label>
								</div>
								<button class="btn btn-primary mt-2" @onclick="Run">Run</button>
								<hr/>
								<MarkdownSpan Content="@HelpSummary"></MarkdownSpan>
							</EditForm>
						</div>
					</div>
					<div class="col-10">
						<div>
							<div class="row">
								<div class="col-6">
									<label class="w-100">
										@SchemaEditorLabel
										<div class="editor-input">
											<MonacoEditor @ref="_schemaEditor" Id="editor-schema" ConstructionOptions="BasicOptions"
														  CssClass="h-100" OnDidChangeModelContent="HandleSchemaChanged" />
										</div>
									</label>
								</div>
								<div class="col-6">
									<label class="w-100">
										Instance
										<div class="editor-input">
											<MonacoEditor @ref="_instanceEditor" Id="editor-instance" ConstructionOptions="BasicOptions"
														  CssClass="h-100" OnDidChangeModelContent="HandleInstanceChanged" />
										</div>
									</label>
								</div>
							</div>
						</div>
						
						<div class="row">
							<label class="mb-4">
								Results
								<div class="editor-input">
									<MonacoEditor @ref="_outputEditor" Id="editor-output" ConstructionOptions="ReadOnlyOptions"
									              CssClass="h-100 mb-2"/>
								</div>
							</label>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	#pragma warning disable CS8618
	private MonacoEditor _schemaEditor;
	private MonacoEditor _instanceEditor;
	private MonacoEditor _outputEditor;

	private readonly SchemaOptionsModel _options = new();

	private readonly List<LibraryVersion> _libraries = new()
	{
		LibraryVersion.GetFor<JsonSchema>(),
		LibraryVersion.GetFor<DataKeyword>(),
		LibraryVersion.GetFor<UniqueKeysKeyword>(),
		LibraryVersion.GetFor<DiscriminatorKeyword>(),
		LibraryVersion.GetFor<ISchemaRefiner>(),
		LibraryVersion.GetFor<ICodeWriter>(),
		LibraryVersion.GetFor<Bound>()
	};

	private IEnumerable<MetadataReference> _references;
	private SchemaOperations _operation = SchemaOperations.Evaluate;

#pragma warning restore CS8618

	public enum SchemaOperations
	{
		Evaluate,
		GenerateSchema,
		GenerateCode,
		GenerateData
	}

	private class SchemaOptionsModel
	{
		public OutputFormat OutputFormat { get; set; } = OutputFormat.Hierarchical;
		public SpecVersion Version { get; set; } = SpecVersion.Draft202012;
		public SpecVersion OutputStructure { get; set; } = SpecVersion.DraftNext;
		public bool ValidateFormat { get; set; }
		public bool IncludeDroppedAnnotations { get; set; }
		public bool AddAnnotationForUnknownKeywords { get; set; }

		public EvaluationOptions ToValidationOptions() => new()
		{
			OutputFormat = OutputFormat,
			EvaluateAs = Version,
			RequireFormatValidation = ValidateFormat,
			PreserveDroppedAnnotations = IncludeDroppedAnnotations,
			AddAnnotationForUnknownKeywords = AddAnnotationForUnknownKeywords
		};
	}

	public SchemaOperations Operation
	{
		get => _operation;
		set
		{
			_operation = value;

			switch (value)
			{
				case SchemaOperations.GenerateSchema:
					ConfigureForSchemaGen();
					break;
				case SchemaOperations.GenerateCode:
					ConfigureForCodeGen();
					break;
				case SchemaOperations.GenerateData:
					ConfigureForDataGen();
					break;
				case SchemaOperations.Evaluate:
				default:
					ConfigureForEvaluation();
					break;
			}
		}
	}

	private string HelpSummary { get; set; } = HelpContent.SchemaEvaluate;
	private string SchemaEditorLabel { get; set; } = "Schema";
	private string EvaluationOptionsVisibility { get; set; } = "visible";

	private static StandaloneEditorConstructionOptions BasicOptions(MonacoEditor _) => EditorOptions.Basic();
	private static StandaloneEditorConstructionOptions ReadOnlyOptions(MonacoEditor _) => EditorOptions.Readonly();

	private static string GetDescription(SpecVersion draft) => draft switch
	{
		SpecVersion.Unspecified => "Draft 2020-12",
		SpecVersion.Draft6 => "Draft 6",
		SpecVersion.Draft7 => "Draft 7",
		SpecVersion.Draft201909 => "Draft 2019-09",
		SpecVersion.Draft202012 => "Draft 2020-12",
		SpecVersion.DraftNext => "Draft-Next (preview)",
		_ => "Draft 2020-12"
	};

	private static string GetDescription(SchemaOperations operation) => operation switch
	{
		SchemaOperations.Evaluate => "Evaluate JSON",
		SchemaOperations.GenerateSchema => "Generate a Schema",
		SchemaOperations.GenerateCode => "Generate Code",
		SchemaOperations.GenerateData => "Generate Data",
		_ => "Evaluate JSON"
	};

	private void ConfigureForEvaluation()
	{
		_schemaEditor.UpdateOptions(new GlobalEditorOptions { TabSize = 2 });
		Task.Run(async () =>
		{
			await _schemaEditor.DetectLanguage();
			await DataManager.Set("schema-input-language", "json");
		});
			
		SchemaEditorLabel = "Schema";

		HelpSummary = HelpContent.SchemaEvaluate;

		EvaluationOptionsVisibility = "";
	}

	private void ConfigureForCodeGen()
	{
		_schemaEditor.UpdateOptions(new GlobalEditorOptions { TabSize = 2 });
		Task.Run(async () =>
		{
			await _schemaEditor.DetectLanguage();
			await DataManager.Set("schema-input-language", "json");
		});
			
		SchemaEditorLabel = "Schema";

		HelpSummary = HelpContent.SchemaGenerateCode;

		EvaluationOptionsVisibility = "d-none";
	}

	private void ConfigureForSchemaGen()
	{
		_schemaEditor.SetLanguage("csharp");
		_schemaEditor.UpdateOptions(new GlobalEditorOptions { TabSize = 4 });
		Task.Run(() => DataManager.Set("schema-input-language", "csharp"));
			
		SchemaEditorLabel = "Classes (C#)";

		HelpSummary = HelpContent.SchemaGenerateSchema;

		EvaluationOptionsVisibility = "d-none";
	}

	private void ConfigureForDataGen()
	{
		_schemaEditor.UpdateOptions(new GlobalEditorOptions { TabSize = 2 });
		Task.Run(async () =>
		{
			await _schemaEditor.DetectLanguage();
			await DataManager.Set("schema-input-language", "json");
		});
			
		SchemaEditorLabel = "Schema";

		HelpSummary = HelpContent.SchemaGenerateData;

		EvaluationOptionsVisibility = "d-none";
	}

	private async Task Run()
	{
		await SaveSchema();
		await SaveInstance();

		switch (Operation)
		{
			case SchemaOperations.Evaluate:
				await Validate();
				break;
			case SchemaOperations.GenerateSchema:
				await GenerateSchema();
				break;
			case SchemaOperations.GenerateCode:
				await GenerateCode();
				break;
			case SchemaOperations.GenerateData:
				await GenerateData();
				break;
			default:
				throw new ArgumentOutOfRangeException();
		}
	}

	private async Task Validate()
	{
		await _outputEditor.SetLanguageAsync("json");
		await _outputEditor.SetValue(string.Empty);

		JsonSchema schema;
		try
		{
			var text = await _schemaEditor.GetValue();
			schema = YamlSerializer.Deserialize<JsonSchema>(text)!;
		}
		catch (Exception e)
		{
			await _outputEditor.SetLanguageAsync("text");
			await _outputEditor.SetValue($"Schema is invalid\n\n{e.Message}");
			return;
		}
		JsonNode? instance;
		try
		{
			instance = YamlSerializer.Parse(await _instanceEditor.GetValue()).Single().ToJsonNode();
		}
		catch (Exception e)
		{
			await _outputEditor.SetLanguageAsync("text");
			await _outputEditor.SetValue($"Instance is invalid\n\n{e.Message}");
			return;
		}

		try
		{
			var results = schema.Evaluate(instance, _options.ToValidationOptions());

			var serializerOptions = new JsonSerializerOptions
			{
				WriteIndented = true,
				Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
			};
			if (_options.OutputStructure == SpecVersion.Draft202012)
				serializerOptions.Converters.Add(new Pre202012EvaluationResultsJsonConverter());
			var resultText = JsonSerializer.Serialize(results, serializerOptions);

			await _outputEditor.SetValue(resultText);
		}
		catch (Exception e)
		{
			await _outputEditor.SetLanguageAsync("text");
			await _outputEditor.SetValue(e.Message);
		}
	}

	private async Task GenerateData()
	{
		await _outputEditor.SetLanguageAsync("json");
		await _outputEditor.SetValue(string.Empty);

		JsonSchema schema;
		try
		{
			schema = YamlSerializer.Deserialize<JsonSchema>(await _schemaEditor.GetValue())!;
		}
		catch (Exception e)
		{
			await _outputEditor.SetLanguageAsync("text");
			await _outputEditor.SetValue($"Schema is invalid\n\n{e.Message}");
			return;
		}

		var generationResults = schema.GenerateData();

		if (generationResults.IsSuccess)
		{
			var instance = JsonSerializer.Serialize(generationResults.Result, new JsonSerializerOptions {WriteIndented = true});
			await _instanceEditor.SetValue(instance);
			await SaveInstance();
		}
		else
		{
			await _outputEditor.SetValue(generationResults.ErrorMessage);
		}
	}

	private async Task GenerateCode()
	{
		await _outputEditor.SetLanguageAsync("csharp");
		await _outputEditor.SetValue(string.Empty);

		JsonSchema schema;
		try
		{
			schema = YamlSerializer.Deserialize<JsonSchema>(await _schemaEditor.GetValue())!;
		}
		catch (Exception e)
		{
			await _outputEditor.SetLanguageAsync("text");
			await _outputEditor.SetValue($"Schema is invalid\n\n{e.Message}");
			return;
		}

		try
		{
			var generatedCode = schema.GenerateCode(CodeWriters.CSharp);

			await _outputEditor.SetValue(generatedCode);
		}
		catch (Exception e)
		{
			await _outputEditor.SetLanguageAsync("text");
			await _outputEditor.SetValue(e.Message);
		}
	}

	private async Task GenerateSchema()
	{
		await _outputEditor.SetLanguageAsync("json");
		await _outputEditor.SetValue(string.Empty);

		try
		{
			var source = await _schemaEditor.GetValue();

			var fullSource = $@"
using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;
using Json.Schema;
using Json.Schema.Generation;

namespace JsonEverythingTemp
{{
	{source}
}}";

			var syntaxTree = CSharpSyntaxTree.ParseText(fullSource);
			var assemblyPath = System.IO.Path.ChangeExtension(System.IO.Path.GetTempFileName(), "dll");

			var compilation = CSharpCompilation.Create(System.IO.Path.GetFileName(assemblyPath))
				.WithOptions(new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary))
				.AddReferences(_references)
				.AddSyntaxTrees(syntaxTree);

			using var dllStream = new MemoryStream();
			using var pdbStream = new MemoryStream();
			var emitResult = compilation.Emit(dllStream, pdbStream);
			if (!emitResult.Success)
			{
				Console.WriteLine("You may expect a list of what compilation errors there are, but unfortunately " +
				                  "Roslyn doesn't seem to be giving that information out (or I don't know how to " +
				                  "interpret it).  So instead, here are the errors in raw form.  Good luck.  If you " +
				                  "know what these mean, please drop a line in a GitHub issue.");
				await _outputEditor.SetValue("Compilation error");
				//var errors = string.Join("\n", emitResult.Diagnostics.Where(x => x.Severity == DiagnosticSeverity.Error)
				//	.Select(x => GetErrorDetails(source, x)));
				//await _outputEditor.SetValue(errors);
				return;
			}

			var assembly = Assembly.Load(dllStream.ToArray());
			var type = assembly.DefinedTypes.First(x => x.Namespace == "JsonEverythingTemp");

			Console.WriteLine($"Generating schema for type '{type.Name}'");
			JsonSchema schema = new JsonSchemaBuilder().FromType(type);

			await _outputEditor.SetValue(JsonSerializer.Serialize(schema, new JsonSerializerOptions { WriteIndented = true }));
		}
		catch (Exception e)
		{
			await _outputEditor.SetLanguageAsync("text");
			await _outputEditor.SetValue(e.Message);
		}
	}

	//private static string GetErrorDetails(string source, Diagnostic diagnostic)
	//{
	//	Console.WriteLine(JsonSerializer.Serialize(diagnostic, new JsonSerializerOptions { WriteIndented = true }));
	//	var start = diagnostic.Location.SourceSpan.Start - 115;
	//	var lineNumber = source[..start].Count(x => x == '\n') + 1;
	//	var lastNewLine = source[..start].LastIndexOf('\n') - 1;
	//	var columnNumber = start - lastNewLine;

	//	return $"Compilation error at line {lineNumber}, col {columnNumber}";
	//	return "Compilation error";
	//}

	private async Task SaveSchema()
	{
		await DataManager.SaveEditorValue(_schemaEditor, "schema");
	}

	private async Task HandleSchemaChanged()
	{
		await _schemaEditor.DetectLanguage();
	}

	private async Task LoadSavedSchema()
	{
		await DataManager.LoadEditorValue(_schemaEditor, "schema");
	}

	private async Task SaveInstance()
	{
		await DataManager.SaveEditorValue(_instanceEditor, "schema-instance");
	}

	private async Task HandleInstanceChanged()
	{
		await _instanceEditor.DetectLanguage();
	}

	private async Task LoadSavedInstance()
	{
		await DataManager.LoadEditorValue(_instanceEditor, "schema-instance");
	}

	private async Task LoadSavedSettings()
	{
		var language = await DataManager.Get("schema-input-language") ?? "json";
		await _schemaEditor.SetLanguageAsync(language);

		Operation = language == "json" ? SchemaOperations.Evaluate : SchemaOperations.GenerateSchema;
		SchemaEditorLabel = language == "json" ? "Classes" : "Schema";
		HelpSummary = language == "json" ? HelpContent.SchemaEvaluate : HelpContent.SchemaGenerateSchema;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			Json.Schema.Data.Vocabularies.Register();
			Json.Schema.ArrayExt.Vocabularies.Register();
			Json.Schema.OpenApi.Vocabularies.Register();
			Json.Schema.UniqueKeys.Vocabularies.Register();
			Data2022Support.Vocabularies.Register();

			await LoadSavedSchema();
			await LoadSavedInstance();
			await LoadSavedSettings();

			await LoadAssemblyReferences();

			await _schemaEditor.DetectLanguage();
			await _instanceEditor.DetectLanguage();

			await _outputEditor.SetLanguageAsync("json");
			await _outputEditor.UpdateOptions(new GlobalEditorOptions { TabSize = 2 });
			await _outputEditor.SetValue(string.Empty);
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task LoadAssemblyReferences()
	{
		var refs = AppDomain.CurrentDomain.GetAssemblies();
		var client = new HttpClient 
		{
			BaseAddress = new Uri(NavigationManager.BaseUri)
		};

		var references = new List<MetadataReference>();

		foreach (var reference in refs.Where(x => !x.IsDynamic))
		{
			Console.WriteLine($"{reference.FullName}\n  Location - {reference.Location}\n");
		}

		foreach(var reference in refs.Where(x => !x.IsDynamic))
		{
			var stream = await client.GetStreamAsync($"_framework/{reference.FullName!.Split(',')[0]}.dll");
			references.Add(MetadataReference.CreateFromStream(stream));
		}

		_references = references;
	}
}