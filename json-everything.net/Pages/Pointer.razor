@page "/json-pointer"
@using BlazorMonaco
@using System.Text.Json
@using Json.Pointer
@using JsonEverythingNet.Services
@using EditorOptions = JsonEverythingNet.Services.EditorOptions
@using System.Text.Encodings.Web

@inject DataManager DataManager;

<PageTitle>JSON Pointer - json-everything.net</PageTitle>

<div class="row mx-3 fill-remaining">
	<div class="mh-100 scroll">
		<div class="navbar me-2">
			<div class="align-items-center hstack mx-2">
				<h1 class="display-4">JSON Pointer</h1>
				<div class="align-items-center mx-3">
					<div>
						Identify specific locations within JSON data
						<br/>
						Learn more about
						<a href="https://datatracker.ietf.org/doc/html/rfc6901" target="_blank">JSON Pointer <ExternalLinkIcon/></a>
					</div>
				</div>
				<Banner Content="JsonPointer.Net now supports .Net 8 and Native AOT!!" Style="margin-top:0;"></Banner>
			</div>
			<div class="align-items-center mt-1">
				@foreach (var library in _libraries)
				{
					<NugetLibrary Library="library"/>
				}
			</div>
		</div>
		
		<div class="me-3">
			<EditForm Model="_input" class="col-12 mb-4">
				<label class="my-2 w-100">
					Pointer
					<InputText @bind-Value="_input.Pointer" DisplayName="Default base URI" class="form-control"
					           @oninput="SavePath"/>
				</label>
			</EditForm>

			<div class="vstack gap-5">
				<div>
					<div class="row">
						<label class="col-5">
							Data
							<div class="editor-input">
								<MonacoEditor @ref="_instanceEditor" Id="editor-instance" ConstructionOptions="BasicOptions"
								              CssClass="h-100"/>
							</div>
						</label>
						<div class="col mx-2 align-items-center row">
							<button class="btn btn-primary w-100" @onclick="Evaluate">Evaluate</button>
						</div>
						<label class="col-5">
							Result
							<div class="editor-input">
								<MonacoEditor @ref="_outputEditor" Id="editor-output" ConstructionOptions="ReadOnlyOptions"
								              CssClass="h-100"/>
							</div>
						</label>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	#pragma warning disable CS8618
	private MonacoEditor _instanceEditor;
	private MonacoEditor _outputEditor;

	private readonly InputModel _input = new();

	private readonly List<LibraryVersion> _libraries = new()
	{
		LibraryVersion.GetFor<JsonPointer>(),
	};
#pragma warning restore CS8618

	private class InputModel
	{
		public string? Pointer { get; set; }
	}

	private static StandaloneEditorConstructionOptions BasicOptions(MonacoEditor _) => EditorOptions.Basic();
	private static StandaloneEditorConstructionOptions ReadOnlyOptions(MonacoEditor _) => EditorOptions.Readonly();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadSavedPath();
			await LoadSavedInstance();
			await _outputEditor.SetValue(string.Empty);
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task Evaluate()
	{
		await SaveInstance();

		JsonPointer pointer;
		try
		{
			pointer = JsonPointer.Parse(_input.Pointer!);
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Pointer is invalid\n\n{e.Message}");
			return;
		}
		JsonElement instance;
		try
		{
			instance = JsonDocument.Parse(await _instanceEditor.GetValue()).RootElement;
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Data is invalid\n\n{e.Message}");
			return;
		}

		var results = pointer.Evaluate(instance);

		var resultText = results.HasValue
			? JsonSerializer.Serialize(results, new JsonSerializerOptions
			{
				WriteIndented = true,
				Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
			})
			: "No value found at that location";

		await _outputEditor.SetValue(resultText);
	}

	private async Task SavePath(ChangeEventArgs args)
	{
		var pointerText = args.Value as string;

		await DataManager.Set("pointer", pointerText ?? string.Empty);
	}

	private async Task LoadSavedPath()
	{
		var pointerText = await DataManager.Get("pointer") ?? string.Empty;

		_input.Pointer = pointerText;
	}

	private async Task SaveInstance()
	{
		await DataManager.SaveEditorValue(_instanceEditor, "pointer-instance");
	}

	private async Task LoadSavedInstance()
	{
		await DataManager.LoadEditorValue(_instanceEditor, "pointer-instance");
	}
}