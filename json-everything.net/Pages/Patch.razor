@page "/json-patch"
@using BlazorMonaco
@using System.Text.Json
@using Json.Patch
@using JsonEverythingNet.Services
@using EditorOptions = JsonEverythingNet.Services.EditorOptions
@using System.Text.Encodings.Web
@using System.Text.Json.Nodes

@inject DataManager DataManager;

<PageTitle>JSON Patch - json-everything.net</PageTitle>


<div class="row mx-3 fill-remaining">
	<div class="mh-100 scroll">
		<div class="navbar me-2">
			<div class="align-items-center hstack mx-2">
				<h1 class="display-4">JSON Patch</h1>
				<div class="align-items-center mx-3">
					<div>
						Describe and process alterations to JSON documents
						<br/>
						Learn more about
						<a href="http://jsonpatch.com/" target="_blank">JSON Patch <ExternalLinkIcon/></a>
					</div>
				</div>
				<Banner Content="JsonPatch.Net now supports .Net 8 and Native AOT!!" Style="margin-top:0;"></Banner>
			</div>
			<div class="align-items-center mt-1">
				@foreach (var library in _libraries)
				{
					<NugetLibrary Library="library"/>
				}
			</div>
		</div>

		<div class="vstack gap-3 mt-4 me-3">
			<div>
				<div class="row">
					<div class="col-2">
						<div class="vstack gap-3">
							<EditForm Model="_options" class="vstack">
							<label class="my-2">
								What do you want to do?<br/>
								<InputSelect @bind-Value="Operation" DisplayName="Spec version" class="form-control">
										@foreach (PatchOperations operation in Enum.GetValues(typeof(PatchOperations)))
									{
										<option value="@operation">@GetDescription(operation)</option>
									}
								</InputSelect>
							</label>
						<button class="btn btn-primary mt-2" @onclick="Run">Run</button>
						<hr />
						<MarkdownSpan Content="@HelpSummary"></MarkdownSpan>
							</EditForm>
						</div>
					</div>
					<div class="col-10">
						<div>
							<div class="row">
								<div class="col-6">
									<label class="w-100">
										@PatchEditorLabel
										<div class="editor-input">
											<MonacoEditor @ref="_patchEditor" Id="editor-patch" ConstructionOptions="BasicOptions"
											              CssClass="h-100"/>
										</div>
									</label>
								</div>
								<div class="col-6">
									<label class="w-100">
										Data / Target data
										<div class="editor-input">
											<MonacoEditor @ref="_instanceEditor" Id="editor-instance" ConstructionOptions="BasicOptions"
											              CssClass="h-100"/>
										</div>
									</label>
								</div>
							</div>
						</div>
			    
						<div class="row">
							<label>
								Result
								<div class="editor-input">
									<MonacoEditor @ref="_outputEditor" Id="editor-output" ConstructionOptions="ReadOnlyOptions"
									              CssClass="h-100"/>
								</div>
							</label>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
#pragma warning disable CS8618
	private MonacoEditor _patchEditor;
	private MonacoEditor _instanceEditor;
	private MonacoEditor _outputEditor;

	private readonly PatchOptionsModel _options = new();

	private readonly List<LibraryVersion> _libraries = new()
	{
		LibraryVersion.GetFor<JsonPatch>(),
	};

	private PatchOperations _operation = PatchOperations.Apply;

#pragma warning restore CS8618

	private class PatchOptionsModel{}

	public enum PatchOperations
	{
		Apply,
		Generate,
	}

	public PatchOperations Operation
	{
		get => _operation;
		set
		{
			_operation = value;
	
			switch (value)
			{
				case PatchOperations.Apply:
					ConfigureForApply();
					break;
				case PatchOperations.Generate:
					ConfigureForGenerate();
					break;
				default:
					ConfigureForApply();
					break;
			}
		}
	}

	private string HelpSummary { get; set; } = HelpContent.PatchApply;
	private string PatchEditorLabel { get; set; } = "Patch";

	private static StandaloneEditorConstructionOptions BasicOptions(MonacoEditor _) => EditorOptions.Basic();
	private static StandaloneEditorConstructionOptions ReadOnlyOptions(MonacoEditor _) => EditorOptions.Readonly();

	private static string GetDescription(PatchOperations operation) => operation switch
	{
		PatchOperations.Apply => "Apply",
		PatchOperations.Generate => "Generate",
		_ => "Apply"
	};

	private void ConfigureForApply()
	{
		PatchEditorLabel = "Patch";

		HelpSummary = HelpContent.PatchApply;
	}

	private void ConfigureForGenerate()
	{
		PatchEditorLabel = "Source data";

		HelpSummary = HelpContent.PatchGenerate;
	}

	private async Task Run()
	{
		await (Operation switch
			{
				PatchOperations.Apply => Apply(),
				PatchOperations.Generate => Generate(),
				_ => Task.CompletedTask
			});
	}

	private async Task Apply()
	{
		await SavePatch();
		await SaveInstance();
		await _outputEditor.SetValue(string.Empty);

		JsonPatch patch;
		try
		{
			patch = JsonSerializer.Deserialize<JsonPatch>(await _patchEditor.GetValue())!;
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Patch is invalid\n\n{e.Message}");
			return;
		}
		JsonNode? instance;
		try
		{
			instance = JsonNode.Parse(await _instanceEditor.GetValue());
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Instance is invalid\n\n{e.Message}");
			return;
		}

		var results = patch.Apply(instance);

		var resultText = results.IsSuccess
			? JsonSerializer.Serialize(results.Result, new JsonSerializerOptions
			{
				WriteIndented = true,
				Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
			})
			: results.Error;

		await _outputEditor.SetValue(resultText);
	}

	private async Task Generate()
	{
		await SavePatch();
		await SaveInstance();
		await _outputEditor.SetValue(string.Empty);

		JsonElement source;
		try
		{
			source = JsonDocument.Parse(await _patchEditor.GetValue()).RootElement;
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Source data is invalid\n\n{e.Message}");
			return;
		}
		JsonElement target;
		try
		{
			target = JsonDocument.Parse(await _instanceEditor.GetValue()).RootElement;
		}
		catch (Exception e)
		{
			await _outputEditor.SetValue($"Target data is invalid\n\n{e.Message}");
			return;
		}

		var patch = source.CreatePatch(target);

		var instance = JsonSerializer.Serialize(patch, new JsonSerializerOptions
		{
			WriteIndented = true,
			Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
		});
		await _outputEditor.SetValue(instance);
	}

	private async Task SavePatch()
	{
		await DataManager.SaveEditorValue(_patchEditor, "patch");
	}

	private async Task LoadSavedPatch()
	{
		await DataManager.LoadEditorValue(_patchEditor, "patch");
	}

	private async Task SaveInstance()
	{
		await DataManager.SaveEditorValue(_instanceEditor, "patch-instance");
	}

	private async Task LoadSavedInstance()
	{
		await DataManager.LoadEditorValue(_instanceEditor, "patch-instance");
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadSavedPatch();
			await LoadSavedInstance();

			await _patchEditor.SetLanguageAsync("json");
			await _patchEditor.UpdateOptions(new GlobalEditorOptions { TabSize = 2 });
			await DataManager.Set("schema-input-language", "json");
			await _outputEditor.SetValue(string.Empty);
		}

		await base.OnAfterRenderAsync(firstRender);
	}
}