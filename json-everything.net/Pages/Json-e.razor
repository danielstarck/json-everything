@page "/json-e"
@using BlazorMonaco
@using System.Text.Json
@using JsonEverythingNet.Services
@using EditorOptions = JsonEverythingNet.Services.EditorOptions
@using System.Text.Encodings.Web
@using System.Text.Json.Nodes
@using Json.JsonE
@using Yaml2JsonNode

@inject DataManager DataManager;

<PageTitle>JSON-e - json-everything.net</PageTitle>

<div class="row mx-3 fill-remaining">
	<div class="mh-100 scroll">
		<div class="navbar me-2">
			<div class="align-items-center hstack mx-2">
				<img src="img/json-e.png" height="70" width="70" class="me-3" />
				<h1 class="display-4">JSON-e</h1>
				<div class="align-items-center mx-3">
					<div>
						Templating and transformation of JSON data
						<br/>
						Learn more about
						<a href="https://json-e.js.org/" target="_blank">JSON-e <ExternalLinkIcon /></a>
					</div>
				</div>
				<Banner Content="JsonE.Net now supports .Net 8 and Native AOT!!" Style="margin-top:0;"></Banner>
			</div>
			<div class="align-items-center mt-1">
				@foreach (var library in _libraries)
				{
					<NugetLibrary Library="library"/>
				}
			</div>
		</div>
		<div class="vstack gap-3 mt-4 me-3">
			<div>
				<div class="row">
					<div class="col-2">
						<div class="vstack gap-3">
							<button class="btn btn-primary mt-2" @onclick="Run">Run</button>
							<hr/>
							<MarkdownSpan Content="@HelpContent.JsonEEvaluate"></MarkdownSpan>
						</div>
					</div>
					<div class="col-10">
						<div>
							<div class="row">
								<div class="col-6">
									<label class="w-100">
										Template
										<div class="editor-input">
											<MonacoEditor @ref="_templateEditor" Id="editor-schema" ConstructionOptions="BasicOptions"
														  CssClass="h-100" OnDidChangeModelContent="HandleTemplateChanged" />
										</div>
									</label>
								</div>
								<div class="col-6">
									<label class="w-100">
										Context
										<div class="editor-input">
											<MonacoEditor @ref="_contextEditor" Id="editor-instance" ConstructionOptions="BasicOptions"
														  CssClass="h-100" OnDidChangeModelContent="HandleContextChanged" />
										</div>
									</label>
								</div>
							</div>
						</div>
						
						<div class="row">
							<label class="mb-4">
								Results
								<div class="editor-input">
									<MonacoEditor @ref="_outputEditor" Id="editor-output" ConstructionOptions="ReadOnlyOptions"
									              CssClass="h-100 mb-2"/>
								</div>
							</label>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
#pragma warning disable CS8618
	private MonacoEditor _templateEditor;
	private MonacoEditor _contextEditor;
	private MonacoEditor _outputEditor;
#pragma warning restore CS8618

	private readonly List<LibraryVersion> _libraries = new()
	{
		LibraryVersion.GetFor<JsonFunction>(),
	};
	private static readonly JsonSerializerOptions _serializerOptions = new()
	{
		WriteIndented = true,
		Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
	};

	private static StandaloneEditorConstructionOptions BasicOptions(MonacoEditor _) => EditorOptions.Basic();
	private static StandaloneEditorConstructionOptions ReadOnlyOptions(MonacoEditor _) => EditorOptions.Readonly();

	private async Task Run()
	{
		await SaveTemplate();
		await SaveContext();

		await Evaluate();
	}

	private async Task Evaluate()
	{
		await _outputEditor.SetLanguageAsync("yaml");
		await _outputEditor.SetValue(string.Empty);

		try
		{
			var templateText = await _templateEditor.GetValue();
			var template = YamlSerializer.Parse(templateText).Single().ToJsonNode();
			var contextText = await _contextEditor.GetValue();
			var context = string.IsNullOrWhiteSpace(contextText) ? null : YamlSerializer.Parse(contextText).Single().ToJsonNode();

			var usesYaml = !TryParseJson(templateText) || !TryParseJson(contextText);

			var results = JsonE.Evaluate(template, context);

			string resultText;
			if (usesYaml)
			{
				await _outputEditor.SetLanguageAsync("yaml");
				resultText = YamlSerializer.Serialize(results, _serializerOptions);
			}
			else
			{
				await _outputEditor.SetLanguageAsync("json");
				resultText = JsonSerializer.Serialize(results, _serializerOptions);
			}

			await _outputEditor.SetValue(resultText);
		}
		catch (Exception e)
		{
			await _outputEditor.SetLanguageAsync("text");
			await _outputEditor.SetValue(e.Message);
		}
	}

	private static bool TryParseJson(string text)
	{
		try
		{
			JsonNode.Parse(text);
			return true;
		}
		catch
		{
			return false;
		}
	}

	private async Task HandleTemplateChanged()
	{
		await _templateEditor.DetectLanguage();
	}

	private async Task SaveTemplate()
	{
		await DataManager.SaveEditorValue(_templateEditor, "json-e-template");
	}

	private async Task LoadSavedTemplate()
	{
		await DataManager.LoadEditorValue(_templateEditor, "json-e-template");
	}

	private async Task HandleContextChanged()
	{
		await _contextEditor.DetectLanguage();
	}

	private async Task SaveContext()
	{
		await DataManager.SaveEditorValue(_contextEditor, "json-e-context");
	}

	private async Task LoadSavedContext()
	{
		await DataManager.LoadEditorValue(_contextEditor, "json-e-context");
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadSavedTemplate();
			await LoadSavedContext();

			await _templateEditor.DetectLanguage();
			await _contextEditor.DetectLanguage();

			await _outputEditor.SetLanguageAsync("yaml");
			await _outputEditor.UpdateOptions(new GlobalEditorOptions { TabSize = 2 });
			await _outputEditor.SetValue(string.Empty);
		}

		await base.OnAfterRenderAsync(firstRender);
	}
}